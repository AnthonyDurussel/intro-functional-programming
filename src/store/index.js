import { createStore } from "redux";

// Initial state
const initialState = {
  currentSlide: 0,
  slides: [
    {
      id: 1,
      title: "üöÄ Introduction √† la programmation fonctionnelle",
      content: `
        <p>Et si je vous disais que vous utilisez d√©j√† la programmation fonctionnelle sans m√™me le savoir ?</p>
    <p>Des fonctions comme <code>map()</code>, <code>filter()</code> ou <code>reduce()</code> font partie de votre quotidien, mais vous n'avez peut-√™tre jamais remarqu√© qu'elles reposent sur un paradigme r√©volutionnaire.</p>
    <p>La programmation fonctionnelle n'est pas une mode ‚Äì c'est un changement de perspective qui pourrait rendre votre code plus fiable, plus rapide et plus facile √† maintenir. Pr√™t √† explorer ce que vous utilisez d√©j√† sans le savoir ?</p>
`,
    },
    {
      id: 2,
      title: "üß™ Fonctionnelle vs Imp√©rative : Qu'est-ce qui change vraiment ?",
      content: `
        <p>Vous avez probablement utilis√© ces deux paradigmes sans m√™me y penser. Mais quelle est la vraie diff√©rence entre eux ? Regardons de plus pr√®s.</p>
        
        <h3>üìú Programmation Imp√©rative :</h3>
        <p>Dans ce mod√®le, vous devez d√©crire <strong>comment</strong> chaque √©tape doit √™tre effectu√©e. Vous manipulez directement les donn√©es et contr√¥lez leur √©tat au fur et √† mesure.</p>
        <p>Exemple : Filtrer les adultes d'une liste de personnes.</p>
        <pre>
    let personnes = [
      { nom: "Alice", age: 30 },
      { nom: "Bob", age: 17 },
      { nom: "Charlie", age: 21 }
    ];
    let adultes = [];
    for (let i = 0; i < personnes.length; i++) {
      if (personnes[i].age >= 18) {
        adultes.push(personnes[i]);
      }
    }
    console.log(adultes);
        </pre>
        <p><strong>Probl√®me :</strong> L'√©tat de la liste est modifi√© au fur et √† mesure, et la logique est imp√©rative, donc le code peut devenir difficile √† maintenir et √† comprendre.</p>
    
        <h3>‚ö° Programmation Fonctionnelle :</h3>
        <p>Ici, vous vous concentrez sur <strong>ce que</strong> vous voulez accomplir, pas sur <strong>comment</strong>. Utilisez des fonctions comme filter() pour cr√©er une nouvelle liste, sans changer l'originale.</p>
        <pre>
    const personnes = [
      { nom: "Alice", age: 30 },
      { nom: "Bob", age: 17 },
      { nom: "Charlie", age: 21 }
    ];
    const adultes = personnes.filter(personne => personne.age >= 18);
    console.log(adultes);
        </pre>
        <p><strong>Avantage :</strong> La logique est plus concise et plus claire. Aucun changement d'√©tat, juste une transformation des donn√©es. Le code est plus lisible et testable.</p>
      `,
    },
    {
      id: 3,
      title: "üß™ Quelques Principes de base",
      content: `
        <p><strong>1. Immutabilit√© des donn√©es</strong></p>
        <p>Les donn√©es sont immuables : une fois cr√©√©es, elles ne peuvent plus √™tre modifi√©es. Cela emp√™che les effets de bord et rend le code plus pr√©visible.</p>
        
        <p><strong>2. Fonctions pures</strong></p>
        <p>Une fonction pure retourne toujours le m√™me r√©sultat pour les m√™mes arguments et n'a pas d'effets secondaires. Cela simplifie les tests et garantit un comportement fiable.</p>
    
        <p><strong>3. Fonctions d'ordre sup√©rieur</strong></p>
        <p>Les fonctions d'ordre sup√©rieur sont des fonctions qui prennent une ou plusieurs fonctions en argument, ou retournent une fonction en r√©sultat.</p>
      `,
      code: "",
    },
    {
      id: 4,
      title: "üß© Immutabilit√©",
      content: `
      <p>Qu'est-ce que l'immutabilit√© ?

<li>Une structure immutable ne peut pas √™tre modifi√©e apr√®s sa cr√©ation.</li>
<li>Chaque "modification" cr√©e une nouvelle version.</li>
</p>
        <p>En programmation fonctionnelle, on cr√©e de nouvelles structures plut√¥t que de modifier les existantes. Pourquoi ?</p>
        <li>√âvite les effets de bord.</li>
<li>Rend le code plus pr√©visible.</li>

<li>Simplifie le raisonnement et le d√©bogage.</li>

      `,
      code: {
        imperative: `
// D√©claration avec const
const personne = {
  prenom: "Alice",
  age: 30
};

console.log("Avant modification :", personne);

// On peut modifier le contenu de l'objet !
personne.age = 31;
console.log("Apr√®s modification :", personne);

// On peut utiliser Object.freeze pour rendre l'objet immuable
const personneImmutable = Object.freeze({
  prenom: "Alice",
  age: 30
});
`,

        functional: `/// D√©claration avec const
const number = 3

// On ne peut pas modifier le contenu de l'objet
// il est immutable !
number = 31;`,
      },
    },
    {
      id: 5,
      title: "üîÑ Fonctions Pures",
      content: `
      <p>Une fonction pure est une fonction qui :</p>
<li>Retourne toujours le m√™me r√©sultat pour les m√™mes arguments</li>
<li>N'a pas d'effets secondaires (ou effets de bord)</li>
<bR
        <p>Exemple : ajout d'un √©lement dans une liste</p>
      `,
      code: {
        functional: `
// Liste initiale
const fruits = ["pomme", "banane"];

function ajouterFruitPure(liste, fruit) {
  return [...liste, fruit]; // Copie + ajout
}

const nouveauxFruits = ajouterFruitPure(fruits, "cerise");

console.log(fruits);         // ‚Üí pas chang√©
console.log(nouveauxFruits); 
`,

        imperative: `
// Liste initiale
let fruits = ["pomme", "banane"];

function ajouterFruitImpure(liste, fruit) {
  liste.push(fruit); // Mutation directe
  return liste;
}

ajouterFruitImpure(fruits, "cerise");

console.log(fruits); 
// ‚Üí la liste d'origine a chang√©`,
      },
    },

    {
      id: 6,
      title: "üéØ Les fonctions d'ordre sup√©rieur ",
      content: `
      <p>Une fonction d'ordre sup√©rieur est une fonction qui :
<li>Prend une fonction en argument.</li>
ou
<li>Retourne une fonction en r√©sultat.</li>
Exemples classiques : map, filter, reduce</p>
      `,
      code: {
        functional: `
const personnes = [
{nom : "bob", age : 21}, 
{nom: "marie", age : 16}, 
{nom: "Paul", age : 18}];

//Fonction Pure
const isAdult = personne => personne.age >= 18;


const adultes = personnes.filter(isAdult);

console.log(adultes);`,

        imperative: `
const personnes = [
{nom : "bob", age : 21}, 
{nom: "marie", age : 16}, 
{nom: "Paul", age : 18}];

// Tableau vide pour stocker les r√©sultats
let adultes = [];

// Boucle imp√©rative (impur) pour ajouter les adultes
for (let i = 0; i < personnes.length; i++) {
  if (personnes[i].age >= 18) {
    adultes.push(personnes[i]);
  }
}

console.log(adultes);`,
      },
    },
    {
      id: 7,
      title: "üí° Avantages et Applications",
      content: `
        <p><strong>Avantages majeurs:</strong></p>
        <ul>
          <li>Parall√©lisation et concurrence facilit√©es</li>
          <li>Testabilit√© et pr√©dictibilit√© am√©lior√©es</li>
          <li>Meilleure lisibilit√© du code</li>
        </ul>
        <p><strong>Domaines d'application:</strong></p>
        <ul>
          <li>Big Data et traitement de donn√©es (Apache Spark, MapReduce)</li>
          <li>Intelligence artificielle et apprentissage automatique</li>
          <li>Syst√®mes distribu√©s (Erlang, Elixir)</li>
          <li>D√©veloppement web moderne (React, Redux)</li>
        </ul>
      `,
    },
    {
      id: 8,
      title: "üèÅ Conclusion",
      content: `
        <p><strong>R√©capitulatif des concepts cl√©s :</strong></p>
        <ul>
          <li><strong>Fonctions pures</strong> : Des fonctions qui ne d√©pendent que de leurs entr√©es et ne produisent aucun effet secondaire. Elles sont essentielles pour √©crire du code pr√©visible et facile √† tester.</li>
          <li><strong>Immutabilit√© des donn√©es</strong> : L'immutabilit√© emp√™che les modifications impr√©vues des donn√©es, ce qui rend le code plus s√ªr et plus facile √† comprendre.</li>
          <li><strong>Fonctions d'ordre sup√©rieur</strong> : Ces fonctions permettent d'abstraire des comportements, favorisant ainsi la r√©utilisation et la composition de code. Elles facilitent le traitement de donn√©es complexes de mani√®re √©l√©gante.</li>
        </ul>
        <p><strong>Pourquoi adopter la programmation fonctionnelle ?</strong></p>
        <ul>
          <li>Elle rend votre code plus pr√©visible et testable, ce qui am√©liore la maintenabilit√©.</li>
          <li>Elle permet de mieux g√©rer les effets de bord, rendant les programmes plus robustes.</li>
          <li>Elle favorise l'√©criture de code plus concis et lisible.</li>
        </ul>
        <p><strong>Pour aller plus loin :</strong></p>
        <ul>
          <li>Explorer des biblioth√®ques fonctionnelles (Lodash, Ramda) pour √©tendre les capacit√©s de votre code.</li>
          <li>Essayer un langage principalement fonctionnel, comme Scala, ou un langage fonctionnel pur, comme Haskell.</li>
        </ul>
        <br/>
        <p>La programmation fonctionnelle ne s'oppose pas aux autres paradigmes, mais elle les compl√®te. Dans le monde moderne du d√©veloppement, vous trouverez souvent des langages hybrides qui int√®grent des √©l√©ments fonctionnels pour tirer parti de ces avantages. Par exemple, avec React et l‚Äôutilisation des Hooks, ou encore avec Redux pour g√©rer l‚Äô√©tat de mani√®re immuable et pr√©visible.</p>
        <p>Ce cours a √©t√© r√©alis√© avec React et Redux (voir <a href="https://github.com/AnthonyDurussel/intro-functional-programming" target="_blank">GitHub</a>)</p>
      `,
    },
  ],
};

// Reducer
function slideReducer(state = initialState, action) {
  switch (action.type) {
    case "NEXT_SLIDE":
      return {
        ...state,
        currentSlide: Math.min(state.currentSlide + 1, state.slides.length - 1),
      };
    case "PREV_SLIDE":
      return {
        ...state,
        currentSlide: Math.max(state.currentSlide - 1, 0),
      };
    case "GO_TO_SLIDE":
      return {
        ...state,
        currentSlide: action.payload,
      };
    default:
      return state;
  }
}

// Create store
export const store = createStore(slideReducer);
